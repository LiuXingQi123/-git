1.修改/新增 编号不能重复【pt-server-AccountDao---findCountByMobile---findCountByMobile】
int count = 0;
//没有id就是新增 //新增
if (StringUtils.isBlank(product.getId())) {
	count = ((ProductDao)dao).findCountByCode(product.getCode());//根据编号查找
} else {//修改
	count = ((ProductDao)dao).findCountByCode(product.getCode(), product.getId());//查询 id不等于自己，编号等于 新编号的
}
return count > 0 ? true : false;

2.一个对象凡是要点击里面的属性，就要考虑这个对象是否为null

3.能用String.valueOf()就不要用toString(),null.toString()会报错,也就是要用toString()的时候就要判断是否为null,而String.valueOf()底层先是做了非空判断,再调用toString()的

4.出现跨域问题时 首先要检查端口号，域名是否正确

5.后台传对象到前台不能传null,应该 student == null ? new Student() : student

6.分页查询，传一个 tableData(list集合)，pageTotal(共几条数据)

7.获取tree的结构,
(1.)jpa后台就查询所有一级父类出去(就类似tree结构了),前台就ca[i].label = ca.name + "(" + ca.code + ")";
that.changeTreeData(ca.children);
(2.)mybatis后台就要转成tree的结构,前台就ca[i].label = ca.name + "(" + ca.code + ")";
that.changeTreeData(ca.children);


10.  :formatter="formatterState"  formatterState(row){row.id}

11. 
Integer[] i = new Integer[]();  array {1,2,3}  i[0]
List<Integer> list1 = new ArrayList<Integer>(0);  list  [1,2,3]  list1.get(0)

12.java中的进一法，去尾法
int b = stores.size()%10000==0?stores.size()/1000:stores.size()/10000+1;
int a1 = (int)Math.round(1.5); //2
int a2 = (int)Math.ceil(1.3);  //2
int a3 = (int)Math.floor(1.3); //1
a = x*(a/x)+a%2;


【15.js非空判断】
数值类型验证 float int
if (!String(this.full) || String(this.full)=="0") {"不能为空/0"}
图片的验证
设置 ref="img"
change--//图片改变时fileChange(file, fileList) {this.$refs['img'].error = "";}
下拉框验证
change--
时间验证
blur--

【16.java排序】
int float
升序
theme.getThemePrices().stream().sorted(Comparator.comparing(ThemePrice::getPrice)).collect(Collectors.toList());
降序
theme.getThemePrices().stream().sorted(Comparator.comparing(ThemePrice::getPrice).reversed()).collect(Collectors.toList());
先按照名字排序, 名字一样再按照年龄排序, 年龄一样再按照薪资排序
personList.stream().sorted(Comparator.comparing(Person::getName).thenComparing(Person::getAge).thenComparing(Person::getSalary)).forEach(System.out::println);
string
Collections.sort(list, (s1, s2) -> s1.get("sort").toString().compareTo(s2.get("sort").toString()));


【17.前端页面初始化问题】【
form:{id:1,theme:{id:1,name:""}}
新增页面时--任然需要form:{id:1,theme:{id:1,name:""}}
没有下划线form:{beginTime:'',endTime:''} 而不是 begin_time,end_time




9.导出excel(get方法) 根据条件查询出List<Product>【fashion-fox-commerce-parent----productCtrl商品列表】
(1.流导出)
HSSFWorkbook wb = new HSSFWorkbook();//创建excel
HSSFSheet sheet1 = wb.createSheet("总览");//创建第一个sheet1
HSSFRow sheet1_Row1 =  sheet1.createRow(0);//创建sheet1里面的第一行数据
sheet1_Row1.createCell(0).setCellValue("编号");//创建sheet1里面的第一行数据的第一个单元格并设置值
在for循环设置行数据：
HSSFRow dataRow = sheet1.createRow(i+1);//用第一个sheet1创建行数据
dataRow.createCell(0).setCellValue(orderSale.getOrderNo());//设置创建行数据的第一个数据值

OutputStream output=resp.getOutputStream();//创建 输出流
resp.reset();//清除缓冲区中存在的任何数据以及状态代码和头
resp.setHeader("Content-disposition", "attachment; filename="+new SimpleDateFormat("yyyy-MM-dd").format(new Date())+".xls");//设置Content-Disposition扩展头的文件名
resp.setContentType("application/msexcel");
wb.write(output);//将创建的excel下载输出
output.close();//关闭 创建的输出流
(2.工具类导出)
ExcelData sheet1 = new ExcelData();//创建excel，创建excel的第一个sheet
sheet1.setName("商品信息表");//设置页签名称
List<String> titles = new ArrayList<>();//设置表头(code,name)
titles.add("code");//设置表头单元格名称
List<List<Object>> rows = new ArrayList<>();//行数据 集合
List<Object> row = new ArrayList<>();//第一行的数据
row.add("编号");//设置第一行数据为对应的中文名
rows.add(row);//把第一行数据添加到行数据 集合中
循环设置行数据
List<Object> list = new ArrayList<>();//行数据
list.add(product.getCode());//设置行数据为对应的内容
rows.add(list);//把数据添加到行数据 集合中
sheet1.setRows(rows);//把行数据 集合添加到sheet1中
ExportExcelUtils.exportExcel(response, "product.xlsx",sheet1);//导出excel


14.导入(1.下载模板，2.选取文件，3.上传文件)模板第一行英文名(code),第二行中文名(编号)【fashion-fox-commerce-parent----productCtrl商品列表】
1.window.location.href=axios.defaults.baseURL+"/"+"/product.xlsx";(spring.resources.static-locations=classpath:/static/,file:${cn.fashionfox.commerce.storage_root_path}--src/main/resources)
  window.location.href="${basePath}/tmp/productImport.xlsx"(spring.resources.static-locations=classpath:/webapp/res/,file:${com.crazyfitting.fashionfox.storage_root_path})
2.前台el-upload 
3.后台MultipartFile file --- ExcelUtils.readExcel(fileName, localFile)

13.商品分类（树状修改）
1.获得当前选中的data=this.$refs.tree2.getCurrentNode();id=data.id (获取当前被选中节点的 data，若没有节点被选中则返回 null)
2.返回 List<String> 后端 根据id查询得到一个分类，查找所有父类(List<String>) 
3.返回 查询所有分类(树状结构) 
4.返回 根据id查询得到一个分类



18.js删除方法
//删除起始下标为1，长度为2的一个值(len设置2) 
var arr2 = ['a','b','c','d'] 
arr2.splice(1,2); 【'a','d'】

var arr = ['a','b','c','d']; 
delete arr[1]; 
arr; 
//["a", undefined × 1, "c", "d"] 中间出现两个逗号，数组长度不变，有一项为undefined

19.js添加方法
push() 结尾添加
unshift() 头部添加

var testArray = [1,2,3];
testArray.splice(2,0,4)//1,2,4,3

20.java添加方法
put（）方法应用于map集合中，add（）方法应用于collection集合中
remove()


导入基本信息【fashion-fox-commerce-parent----productCtrl商品列表】
导出基本信息【fashion-fox-commerce-parent----productCtrl商品列表】
下载图片【fashion-fox-commerce-parent----productCtrl商品列表】
导入图片【fashion-fox-commerce-parent----productCtrl商品列表】
下载模板【fashion-fox-commerce-parent----productCtrl商品列表】
树状结构【fashion-fox-commerce-parent----productCategoryController商品管理分类】


